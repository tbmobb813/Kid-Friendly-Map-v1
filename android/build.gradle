// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  repositories {
    google()
    mavenCentral()
  }
  dependencies {
  // Use a published, stable AGP version so plugin artifacts can be resolved.
  // 9.0.0 is not available in configured repositories; revert to 8.1.2 which is known to work in this project.
  classpath('com.android.tools.build:gradle:8.1.2')
    classpath('com.facebook.react:react-native-gradle-plugin')
    // Use Kotlin Gradle plugin 2.1.20 to match included gradle plugin builds
    classpath('org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.20')
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
  }
}

// Defer applying plugins that are provided by included builds (expo/expo-gradle-plugin)
// This ensures the included-build (node_modules/expo-modules-autolinking/android/expo-gradle-plugin)
// has been evaluated and its plugin IDs registered before we try to apply them here.
// Provide safe default Android SDK / build values in case an included build
// that normally supplies them (expo-root-project / react rootproject) is
// not available yet during early configuration. These defaults match the
// values used historically in our Gradle logs and allow AGP to configure
// the ':app' project without failing.
ext {
  compileSdkVersion = 36
  minSdkVersion = 24
  targetSdkVersion = 36
  // Keep a sensible default buildToolsVersion and ndkVersion; these may be
  // overridden by the expo/root project plugin when available.
  // AGP 9.x expects/uses Build Tools 35.x; prefer 35.0.0 to avoid warnings.
  buildToolsVersion = '35.0.0'
  // Use an installed NDK version. 28.x folder lacks source.properties in this environment,
  // so default to a known-installed NDK to avoid AGP errors during configuration.
  ndkVersion = '27.1.12297006'
}

gradle.projectsEvaluated {
  try {
    apply plugin: "expo-root-project"
  } catch (Exception e) {
    logger.lifecycle("expo-root-project plugin not available yet: ${e.message}")
  }

  try {
    apply plugin: "com.facebook.react.rootproject"
  } catch (Exception e) {
    logger.lifecycle("com.facebook.react.rootproject plugin not available yet: ${e.message}")
  }
}


// Ensure library and app modules that don't explicitly set `compileSdk` / `compileSdkVersion`
// receive a sane default from rootProject.ext. Newer Android Gradle Plugin versions
// require `compileSdk` to be present on each Android project; some upstream
// modules (for example `:expo`) rely on the root project to provide the value
// indirectly. Provide a small, defensive fallback here so we don't have to edit
// files under node_modules.
subprojects { sub ->
  sub.afterEvaluate {
    try {
      def hasAndroidPlugin = sub.plugins.hasPlugin('com.android.library') || sub.plugins.hasPlugin('com.android.application')
      if (!hasAndroidPlugin) return

      def androidExt = sub.extensions.findByName('android')
      if (androidExt == null) return

      // Prefer rootProject.ext.compileSdkVersion, then rootProject.ext.compileSdk, then a sensible default.
      def compileSdkValue = null
      if (rootProject.hasProperty('ext')) {
        if (rootProject.ext.has('compileSdkVersion')) {
          compileSdkValue = rootProject.ext.compileSdkVersion
        } else if (rootProject.ext.has('compileSdk')) {
          compileSdkValue = rootProject.ext.compileSdk
        }
      }
      if (compileSdkValue == null) compileSdkValue = 36

      // If neither compileSdk nor compileSdkVersion is present on the android extension,
      // set compileSdk (newer AGP) or fall back to compileSdkVersion when necessary.
      def hasCompileSdk = (androidExt.hasProperty('compileSdk') || androidExt.hasProperty('compileSdkVersion'))
      if (!hasCompileSdk) {
        try {
          androidExt.compileSdk = compileSdkValue
        } catch (Exception e) {
          // Some AGP versions expect compileSdkVersion - try that as a fallback.
          try {
            androidExt.compileSdkVersion = compileSdkValue
          } catch (Exception ignored) {
          }
        }
        println "Set compileSdk for project ${sub.name} -> ${compileSdkValue}"
      }
    } catch (ignored) {
    }
  }
}
