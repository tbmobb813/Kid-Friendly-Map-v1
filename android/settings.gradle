pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    // JetBrains Compose plugin repository (helps resolve Kotlin Compose Gradle plugin artifacts)
    maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    resolutionStrategy {
        eachPlugin {
            if (requested.id.id.startsWith("org.jetbrains.kotlin")) {
                useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10")
            }
            if (requested.id.id == "com.android.application" || requested.id.id == "com.android.library") {
                useModule("com.android.tools.build:gradle:8.1.1")
            }
            if (requested.id.id == "org.gradle.kotlin.kotlin-dsl" || requested.id.id == "kotlin-dsl") {
                useModule("org.gradle.kotlin:gradle-kotlin-dsl:2.1.0")
            }
        }
    }
}

rootProject.name = "Kid-Friendly Map & Transit Navigator"

// Helper to run node from the project root (parent of android/)
def nodeResolve(String pkg) {
  def proc = providers.exec {
    workingDir(rootDir.parentFile)
    commandLine("node", "--print", "require.resolve('${pkg}/package.json')")
  }
  return proc.standardOutput.asText.orNull?.trim()
}

// include @react-native/gradle-plugin (if present)
def rnPkgPath = nodeResolve("@react-native/gradle-plugin")
if (rnPkgPath != null) {
  def rnDir = new File(rnPkgPath).parentFile.absolutePath
  if (file(rnDir).exists()) {
    includeBuild(rnDir)
  }
}

// Include the expo-modules-autolinking/expo-gradle-plugin build from node_modules so the
// expo Gradle plugin and extensions (expoLibs, etc) are available during configuration.
def autolinkingPkgPath = nodeResolve("expo-modules-autolinking")
if (autolinkingPkgPath != null) {
  def autolinkingDir = new File(autolinkingPkgPath).parentFile
  def expoPluginsPath = new File(autolinkingDir, "android/expo-gradle-plugin").absolutePath
  if (file(expoPluginsPath).exists()) {
    includeBuild(expoPluginsPath)
  } else {
    if (file(autolinkingDir.absolutePath).exists()) includeBuild(autolinkingDir.absolutePath)
  }
}

// Apply Expo's autolinking script from the package so it can configure the project and
// register plugin-provided extensions such as expoLibs.
apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir.parentFile).text.trim(), "../scripts/autolinking.gradle")

// Enable autolinking: this will resolve expo modules, include their projects and
// add plugin classpaths so extensions like `expoLibs` become available in build.gradle.
try {
  useExpoModules()
} catch (ignored) {
  println "useExpoModules() not available; skipping autolinking invocation"
}

include ':app'
