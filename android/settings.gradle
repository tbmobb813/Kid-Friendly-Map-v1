pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    resolutionStrategy {
        eachPlugin {
            if (requested.id.id.startsWith("org.jetbrains.kotlin")) {
                useModule("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10")
            }
            if (requested.id.id == "com.android.application" || requested.id.id == "com.android.library") {
                useModule("com.android.tools.build:gradle:8.1.1")
            }
            if (requested.id.id == "org.gradle.kotlin.kotlin-dsl" || requested.id.id == "kotlin-dsl") {
                useModule("org.gradle.kotlin:gradle-kotlin-dsl:2.1.0")
            }
        }
    }
}

rootProject.name = "Kid-Friendly Map & Transit Navigator"

// Helper to run node from the project root (parent of android/)
def nodeResolve(String pkg) {
  def proc = providers.exec {
    workingDir(rootDir.parentFile)
    commandLine("node", "--print", "require.resolve('${pkg}/package.json')")
  }
  return proc.standardOutput.asText.orNull?.trim()
}

// include @react-native/gradle-plugin (if present)
def rnPkgPath = nodeResolve("@react-native/gradle-plugin")
if (rnPkgPath != null) {
  def rnDir = new File(rnPkgPath).parentFile.absolutePath
  if (file(rnDir).exists()) {
    includeBuild(rnDir)
  }
}

// NOTE: don't include the expo-modules-autolinking/expo-gradle-plugin build from node_modules.
// Compiling that included build from sources often fails. Use the published plugin instead.
//
// The block below was intentionally commented out to avoid includeBuild of expo's plugin source.
/*
def autolinkingPkgPath = nodeResolve("expo-modules-autolinking")
if (autolinkingPkgPath != null) {
  def autolinkingDir = new File(autolinkingPkgPath).parentFile
  def expoPluginsPath = new File(autolinkingDir, "android/expo-gradle-plugin").absolutePath
  if (file(expoPluginsPath).exists()) {
    includeBuild(expoPluginsPath)
  } else {
    if (file(autolinkingDir.absolutePath).exists()) includeBuild(autolinkingDir.absolutePath)
  }
}
*/

// Replace the external autolinking apply (which triggers includeBuild of node_modules sources)
//apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir.parentFile).text.trim(), "../scripts/autolinking.gradle")
// Use a local stub to avoid compiling plugin sources from node_modules
apply from: file("autolinking-stub.gradle")

// Minimal inline stub to prevent autolinking from including node_modules plugin sources.
// Must be defined before useExpoModules() is invoked.
def useExpoModules() {
  println "Stubbed useExpoModules(): skipping includeBuild of expo plugin sources."
}

include ':app'
