// Minimal, clean settings.gradle
// Purpose: configure plugin resolution for Kotlin artifacts (including kotlin-serialization)
// and include the React Native / Expo plugin builds.

pluginManagement {
  resolutionStrategy {
    eachPlugin { details ->
      def requested = details.requested
      def id = requested.id != null ? requested.id.id : null
      if (id != null) {
        if (id == 'org.jetbrains.kotlin.plugin.serialization') {
          details.useModule('org.jetbrains.kotlin:kotlin-serialization:2.1.20')
        } else if (id.startsWith('org.jetbrains.kotlin')) {
          details.useModule('org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.20')
        }
      }
    }
  }

  repositories {
    gradlePluginPortal()
    mavenCentral()
    google()
  }
}

// Include composite builds used by the project (react-native Gradle plugin and expo plugins)
def reactNativePath = new File(
  providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })")
  }.standardOutput.asText.get().trim()
).getParentFile().absolutePath
includeBuild(reactNativePath)

def expoAutolinkingPkgPath = providers.exec {
  workingDir(rootDir)
  commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")
}.standardOutput.asText.get().trim()
def expoPluginsDir = new File(new File(expoAutolinkingPkgPath).getParentFile(), "android/expo-gradle-plugin").absolutePath
includeBuild(expoPluginsDir)

rootProject.name = 'Kid-Friendly Map & Transit Navigator'

include ':app'
