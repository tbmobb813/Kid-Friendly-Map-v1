apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// Configure Kotlin JVM toolchain to Java 21 early so Kotlin and Java share the same JVM
// This helps avoid Kotlin's JVM-target validation errors when JavaCompile target differs.
// Configure Kotlin JVM toolchain explicitly so Kotlin uses Java 21 at configuration time.
kotlin {
    jvmToolchain {
        // Use Java 17 toolchain for now to match AGP/Gradle compatibility.
        // AGP 8.x often targets Java 17 for compilation; set 17 here to avoid
        // Kotlin/Java JVM-target mismatch until AGP is upgraded to support Java 21.
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Ensure hermesEnabled is defined from gradle properties (fallback to false).
// Some setups (especially when expo/root plugin hasn't applied) won't set this
// property, so guard access to avoid a MissingPropertyException during
// configuration time.
def hermesEnabled = (findProperty('hermesEnabled') ?: 'false').toString()



def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    // The autolinking plugin (provided by included builds) generates
    // android/build/generated/autolinking/autolinking.json. When running
    // early configuration that file may not exist yet. Guard the call so the
    // project can configure without throwing FileNotFoundException.
    try {
        def autolinkJson = new File(rootProject.projectDir, "build/generated/autolinking/autolinking.json")
        if (autolinkJson.exists()) {
            autolinkLibrariesWithApp()
        } else {
            println "Skipping autolinkLibrariesWithApp(): autolinking.json not present yet"
        }
    } catch (Exception e) {
        println "autolinkLibrariesWithApp() skipped due to: ${e.message}"
    }
}

/**
 * Set this to true in release builds to optimize the app using [R8](https://developer.android.com/topic/performance/app-optimization/enable-app-optimization).
 */
def enableMinifyInReleaseBuilds = (findProperty('android.enableMinifyInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    // Use rootProject ext value if available; otherwise fall back to a safe default.
    def _compileSdk = (rootProject.hasProperty('ext') && rootProject.ext.has('compileSdkVersion')) ? rootProject.ext.compileSdkVersion : 36
    compileSdk _compileSdk

    namespace 'app.rork.kid_friendly_map_transit_navigator'
    defaultConfig {
        applicationId 'app.rork.kid_friendly_map_transit_navigator'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"${findProperty('reactNativeReleaseLevel') ?: 'stable'}\""
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            def enableShrinkResources = findProperty('android.enableShrinkResourcesInReleaseBuilds') ?: 'false'
            shrinkResources enableShrinkResources.toBoolean()
            minifyEnabled enableMinifyInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            def enablePngCrunchInRelease = findProperty('android.enablePngCrunchInReleaseBuilds') ?: 'true'
            crunchPngs enablePngCrunchInRelease.toBoolean()
        }
    }
    packagingOptions {
        jniLibs {
            def enableLegacyPackaging = findProperty('expo.useLegacyPackaging') ?: 'false'
            useLegacyPackaging enableLegacyPackaging.toBoolean()
        }
    }
    // Force the Android Gradle Plugin to use the installed CMake 4.1.2 from the SDK.
    // This ensures the native build invokes the expected cmake binary under
    // /home/jsnni/android/sdk/cmake/4.1.2 when externalNativeBuild is executed.
    externalNativeBuild {
        cmake {
            version "4.1.2"
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }

    // Use Java 17 toolchain and targets to match AGP 8.x expectations
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    // Prefer Gradle Java toolchain where supported (set to 17 for compatibility)
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}

// Align Java and Kotlin compilation toolchains to Java 21
// Configure tasks eagerly so settings apply before Kotlin's JVM-target validation runs
// Ensure JavaCompile tasks use Java 21 toolchain and set release flag
tasks.withType(org.gradle.api.tasks.compile.JavaCompile).configureEach { jc ->
    // Do not use `options.release` with Android Gradle Plugin (AGP) because
    // AGP needs to set up the bootclasspath for Android API compatibility.
    // Use sourceCompatibility/targetCompatibility and the Gradle/java toolchain instead.
    try {
        jc.sourceCompatibility = JavaVersion.VERSION_17
        jc.targetCompatibility = JavaVersion.VERSION_17
    } catch (Exception ignored) {
    }
}

// Debug: print JavaCompile targets at configuration time to help diagnose
// why Kotlin sees a different JVM target.
tasks.withType(org.gradle.api.tasks.compile.JavaCompile).configureEach { jc ->
    try {
        println "DEBUG: JavaCompile task '${jc.name}' source=${jc.sourceCompatibility} target=${jc.targetCompatibility} javaCompiler=${jc.javaCompiler != null}"
    } catch (Exception e) {
        println "DEBUG: JavaCompile task '${jc.name}' inspect failed: ${e.message}"
    }
}

// Ensure Kotlin compiles to JVM target 21 and configure Kotlin toolchain eagerly
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kt ->
    try {
        kt.kotlinOptions.jvmTarget = "17"
    } catch (Exception ignored) {
    }
}

// Debug: print KotlinCompile jvmTarget and toolchain info
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { kt ->
    try {
        println "DEBUG: KotlinCompile task '${kt.name}' jvmTarget=${kt.kotlinOptions.jvmTarget} javaToolchain=${kt.kotlinJavaToolchain != null}"
    } catch (Exception e) {
        println "DEBUG: KotlinCompile task '${kt.name}' inspect failed: ${e.message}"
    }
}

// Try to configure Kotlin jvm toolchain globally if available (no-op on older plugin versions)
// Ensured above via the `kotlin { jvmToolchain { ... } }` block.

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    // Ensure we have a fresco version even if the expo/root plugin hasn't
    // been applied yet and 'expoLibs' is not available. Prefer the value
    // from expoLibs when possible, otherwise fall back to a safe literal.
    def _frescoVersion = '2.6.0'
    try {
        if (project.hasProperty('expoLibs')) {
            _frescoVersion = expoLibs.versions.fresco.get()
        }
    } catch (Exception e) {
        println "Using fallback fresco version: ${_frescoVersion} because expoLibs is not available: ${e.message}"
    }

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${_frescoVersion}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${_frescoVersion}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${_frescoVersion}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Android 12+ splash screen attributes and Theme.SplashScreen come from
    // the AndroidX Core SplashScreen library. Add it so resource linking
    // can find Theme.SplashScreen and the windowSplashScreen* attributes.
    implementation("androidx.core:core-splashscreen:1.0.1")

    // No forced inclusion of expo-modules-core here; optional runtime calls are
    // invoked reflectively in MainActivity to avoid compile-time dependency.
}
